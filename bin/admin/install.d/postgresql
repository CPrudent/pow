#!/bin/bash

    #--------------------------------------------------------------------------
    # synopsis
    #--
    # install PostgreSQL's package

source $POW_DIR_ROOT/lib/libenv.sh || exit ${ERROR_CODE:-3}

is_user_root &&

# import the repository key
{
    # see: https://wiki.postgresql.org/wiki/Apt (apt-key depreciated)
    # https://askubuntu.com/questions/1176504/how-to-check-if-gpg-key-already-exist-with-bash-then-skip-downloading-adding
    [ ! -f /etc/apt/trusted.gpg.d/apt.postgresql.org.gpg ] && {
        curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | tee /etc/apt/trusted.gpg.d/apt.postgresql.org.gpg >/dev/null

        # need to be converted !
        # manually realized (solution 1)
        # cd /etc/apt/trusted.gpg.d/
        # gpg --no-default-keyring --keyring ./postgresql.gpg --import ./apt.postgresql.org.gpg
        # gpg --no-default-keyring --keyring ./postgresql.gpg --export > ./apt.postgresql.org.gpg
        # rm ./postgresql.gpg*
        # TODO automatize the converion

        # solution 1
        # https://stackoverflow.com/questions/51300627/apt-rejects-keyrings-in-etc-apt-trusted-gpg-d-on-ubuntu-18-04

        # solution 2
        # https://stackoverflow.com/questions/62200848/how-do-i-get-gpg-to-generate-a-gpg-key-public-ring-rather-than-a-keybox
    } || true
} &&

# add postgresql's repository
{
    [ ! -f /etc/apt/sources.list.d/pgdg.list ] && {
        echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list
    } || true
} &&

# update
apt update &&

# install
{
    _PG_VERSION=$(get_conf PG_VERSION) &&
    _PG_PORT=$(get_conf PG_PORT) &&
    _POSTGIS_VERSION=$(get_conf POSTGIS_VERSION) &&
    _PG_DBNAME=$(get_conf PG_DBNAME) &&
    _pg_bin_dir=/usr/lib/postgresql/${_PG_VERSION}/bin &&
    _package_list="postgresql-${_PG_VERSION} postgresql-contrib-${_PG_VERSION}" &&
    _package_list+=" postgresql-${_PG_VERSION}-postgis-${_POSTGIS_VERSION}" &&
    _package_list+=" postgresql-${_PG_VERSION}-postgis-${_POSTGIS_VERSION}-scripts" &&
    _package_list+=" gdal-bin" &&

    apt install $_package_list
} || {
    log_error "erreur installation du package PostgreSQL"
    exit $ERROR_CODE
}

# post-install
[ -n "$(which pg_lsclusters)" ] && {
    _nb_clusters=$(($(pg_lsclusters | wc -l) -1))
    [ $_nb_clusters -gt 1 ] &&
    log_info 'Plusieurs clusters PostgreSQL sont présents, lister les clusters avec pg_lsclusters, supprimer les clusters en trop avec pg_dropcluster, supprimer les binaires en trop'

    _PG_VERSION_INSTALLEE=$(pg_lsclusters | grep "${_PG_PORT} *online" | grep -o '^[0-9]\+')
    [ -z "$_PG_VERSION_INSTALLEE" ] &&
    log_error "Pas de cluster PostgreSQL actif sur le port configuré ($_PG_PORT)" &&
    exit $ERROR_CODE

    ([ -n "$_PG_VERSION_INSTALLEE" ] && [ "$_PG_VERSION_INSTALLEE" != "${_PG_VERSION}" ]) &&
    log_error "La version PostgreSQL ($_PG_VERSION_INSTALLEE) du cluster actif sur le port configuré ($_PG_PORT) est différente de la version configurée $($_PG_VERSION)" &&
    exit $ERROR_CODE
}

# custom config
# https://www.enterprisedb.com/blog/tuning-maxwalsize-postgresql
# https://www.enterprisedb.com/postgres-tutorials/how-tune-postgresql-memory
declare -A _params_postgresql=(
    [log_min_duration_statement]=5000
    [listen_addresses]="'*'"
    [min_wal_size]='500MB'
    [max_wal_size]='3GB'
    [shared_buffers]='2GB'
    [work_mem]='500MB'
    [maintenance_work_mem]='250MB'
    [join_collapse_limit]=16
    [tcp_keepalives_idle]=300
)

_dir_tmp=/tmp/install-SGBD
mkdir -p $_dir_tmp
cp /etc/postgresql/${_PG_VERSION}/main/postgresql.conf $_dir_tmp/postgresql.conf
set_params_conf_file \
    --conf_file "$_dir_tmp/postgresql.conf" \
    --param_codes "${!_params_postgresql[*]}" \
    --param_values "${_params_postgresql[*]}"

if is_different --dir_a "/etc/postgresql/$_PG_VERSION/main" --dir_b "$_dir_tmp" --file_name 'postgresql.conf' ||
    is_different --dir_a "/etc/postgresql/$_PG_VERSION/main" --dir_b "$POW_DIR_ROOT/etc/postgresql/" --file_name 'pg_hba.conf'; then

	log_info "Mise à jour de la configuration de PostgreSQL et redémarrage du service"
	#sauvegarde
	cp /etc/postgresql/$_PG_VERSION/main/postgresql.conf $_dir_tmp/postgresql.conf.backup
	cp /etc/postgresql/$_PG_VERSION/main/pg_hba.conf $_dir_tmp/pg_hba.conf.backup
	#nouvelle configuration
	cp $_dir_tmp/postgresql.conf /etc/postgresql/$_PG_VERSION/main/postgresql.conf
    cp $POW_DIR_ROOT/etc/postgresql/pg_hba.conf /etc/postgresql/$_PG_VERSION/main/pg_hba.conf
	#redémarrage du service
	pg_ctlcluster $_PG_VERSION main restart || {
		log_error "Erreur lors de la mise à jour de la configuration de PostgreSQL : retour arrière"
        cp $_dir_tmp/postgresql.conf.backup /etc/postgresql/$_PG_VERSION/main/postgresql.conf
        cp $_dir_tmp/pg_hba.conf.backup /etc/postgresql/$_PG_VERSION/main/pg_hba.conf
 		pg_ctlcluster $_PG_VERSION main restart
		exit $ERROR_CODE
	}
else
	log_info "La configuration de PostgreSQL est déjà à jour"
fi
rm -r $_dir_tmp

# create db (if not already exists)
$_pg_bin_dir/psql -U postgres -d $_PG_DBNAME -p $_PG_PORT -c "SELECT 1" > /dev/null || {
    log_info "Création du tablespace et de la base de données $_PG_DBNAME"
    mkdir -p $POW_DIR_DATA/postgresql/data &&
    chown -R postgres:postgres $POW_DIR_DATA/postgresql &&
    chmod go-rx $POW_DIR_DATA/postgresql &&
    $_pg_bin_dir/psql -U postgres -p $_PG_PORT -c "CREATE TABLESPACE ${_PG_DBNAME}_tablespace LOCATION '$POW_DIR_DATA/postgresql/data'" &&
    $_pg_bin_dir/psql -U postgres -p $_PG_PORT -c "CREATE DATABASE $_PG_DBNAME TABLESPACE ${_PG_DBNAME}_tablespace" &&
    su --login postgres --command="$_pg_bin_dir/psql -p $_PG_PORT -c \"ALTER USER postgres WITH ENCRYPTED PASSWORD 'md5c375a6ae9835e94d95d46481b49b6e9a' VALID UNTIL 'infinity';\"" &&
    su --login postgres --command="$_pg_bin_dir/psql -p $_PG_PORT -c 'GRANT ALL PRIVILEGES ON DATABASE \"${_PG_DBNAME}\" TO postgres;'" &&
    pg_ctlcluster $_PG_VERSION main restart &&
    _set_pg_passwd || exit $ERROR_CODE
}

exit $SUCCESS_CODE
